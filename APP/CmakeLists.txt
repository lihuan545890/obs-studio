project(obs-demo)

find_package(FFmpeg REQUIRED COMPONENTS avcodec avutil avformat)
find_package(CURL REQUIRED)

add_executable(obs-demo)

find_qt(COMPONENTS Widgets Network Svg Xml COMPONENTS_LINUX Gui)

target_link_libraries(obs-demo PRIVATE Qt::Widgets Qt::Svg Qt::Xml Qt::Network)

set_target_properties(
  obs-demo
  PROPERTIES AUTOMOC ON
             AUTOUIC ON
             AUTORCC ON
             AUTOUIC_SEARCH_PATHS "forms")

target_include_directories(obs-demo PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}
                                       ${CMAKE_CURRENT_BINARY_DIR})


target_sources(
  obs-demo
  PRIVATE main.cpp)

target_compile_features(obs-demo PRIVATE cxx_std_17)

target_include_directories(obs-demo PRIVATE ${CMAKE_SOURCE_DIR}/deps/json11
                                       ${CMAKE_SOURCE_DIR}/deps/libff)

target_link_libraries(
  obs-demo PRIVATE CURL::libcurl FFmpeg::avcodec FFmpeg::avutil FFmpeg::avformat
              OBS::libobs)




if(OS_WINDOWS)
  set_target_properties(obs-demo PROPERTIES WIN32_EXECUTABLE OFF OUTPUT_NAME
                                                           "obs-demo")

  # configure_file(${CMAKE_CURRENT_SOURCE_DIR}/obs.rc.in
                 # ${CMAKE_BINARY_DIR}/obs.rc)

  # target_sources(
    # obs-demo
    # PRIVATE obs.manifest
            # platform-windows.cpp
            # win-update/update-window.cpp
            # win-update/update-window.hpp
            # win-update/win-update.cpp
            # win-update/win-update.hpp
            # win-update/win-update-helpers.cpp
            # win-update/win-update-helpers.hpp
            # ${CMAKE_BINARY_DIR}/obs.rc)

  if(_QT_VERSION EQUAL 5)
    find_qt(COMPONENTS WinExtras)
    target_link_libraries(obs-demo PRIVATE Qt::WinExtras)
  endif()

  target_link_libraries(obs-demo PRIVATE crypt32 OBS::blake2)

  target_compile_features(obs-demo PRIVATE cxx_std_17)

  target_compile_definitions(
    obs-demo PRIVATE UNICODE _UNICODE _CRT_SECURE_NO_WARNINGS
                _CRT_NONSTDC_NO_WARNINGS)

  if(MSVC)
    target_link_options(obs-demo PRIVATE "LINKER:/IGNORE:4098" "LINKER:/IGNORE:4099")
    target_link_libraries(obs-demo PRIVATE OBS::w32-pthreads)

    set_source_files_properties(
      ${CMAKE_CURRENT_SOURCE_DIR}../deps/libff/libff/ff-util.c
      PROPERTIES COMPILE_FLAGS -Dinline=__inline)
  endif()

  if(CMAKE_SIZEOF_VOID_P EQUAL 4)
    target_link_options(obs-demo PRIVATE /LARGEADDRESSAWARE)
  endif()

elseif(OS_MACOS)


elseif(OS_POSIX)

endif()

get_target_property(_SOURCES obs-demo SOURCES)
set(_UI ${_SOURCES})
list(FILTER _UI INCLUDE REGEX ".*\\.ui?")

source_group(
  TREE "${CMAKE_CURRENT_SOURCE_DIR}/forms"
  PREFIX "UI Files"
  FILES ${_UI})
unset(_SOURCES)
unset(_UI)

# define_graphic_modules(obs-demo)
# setup_obs_app(obs-demo)
# setup_target_resources(obs obs-studio)
# add_target_resource(obs ${CMAKE_CURRENT_SOURCE_DIR}/../AUTHORS
                    # obs-studio/authors)
